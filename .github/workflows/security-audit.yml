name: Security Audit

on:
  push:
    branches: [main, develop]
    paths:
      - 'requirements.txt'
      - 'constraints.txt'
      - '.github/workflows/security-audit.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'requirements.txt'
      - 'constraints.txt'
      - '.github/workflows/security-audit.yml'
  schedule:
    # Run weekly on Mondays at 9:00 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  issues: write

jobs:
  dependency-audit:
    name: Audit Python Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit safety

      - name: Run pip-audit (fail on high severity)
        id: pip-audit
        continue-on-error: true
        run: |
          echo "## pip-audit Report" >> $GITHUB_STEP_SUMMARY
          pip-audit --requirement requirements.txt --desc --format markdown >> $GITHUB_STEP_SUMMARY || true

          # Run again with exit code for high/critical severity
          pip-audit --requirement requirements.txt --vulnerability-service osv --require-hashes=false

      - name: Run Safety check
        id: safety
        continue-on-error: true
        run: |
          echo "## Safety Check Report" >> $GITHUB_STEP_SUMMARY
          safety check --json --file requirements.txt > safety-report.json || true

          # Parse and display results
          if [ -f safety-report.json ]; then
            python3 <<'PYEOF'
          import json
          import sys
          try:
              with open('safety-report.json', 'r') as f:
                  data = json.load(f)

              if isinstance(data, dict) and 'vulnerabilities' in data:
                  vulns = data['vulnerabilities']
              elif isinstance(data, list):
                  vulns = data
              else:
                  vulns = []

              print(f"Found {len(vulns)} vulnerabilities")

              high_severity = [v for v in vulns if v.get('severity', '').lower() in ['high', 'critical']]

              if high_severity:
                  print(f"CRITICAL: {len(high_severity)} high/critical severity vulnerabilities found!")
                  for v in high_severity:
                      print(f"  - {v.get('package_name')} {v.get('vulnerable_spec')}: {v.get('advisory')}")
                  sys.exit(1)

              print("No high/critical severity vulnerabilities found.")
          except Exception as e:
              print(f"Error parsing safety report: {e}")
              sys.exit(0)
          PYEOF
          fi

      - name: Check results and fail if needed
        if: steps.pip-audit.outcome == 'failure'
        run: |
          echo "::error::High severity vulnerabilities detected by pip-audit"
          exit 1

  secret-scanning:
    name: Scan for Secrets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for gitleaks

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_CONFIG: .gitleaks.toml

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-audit, secret-scanning]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "## Security Audit Complete" >> $GITHUB_STEP_SUMMARY
          echo "- Dependency Audit: ${{ needs.dependency-audit.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Secret Scanning: ${{ needs.secret-scanning.result }}" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.dependency-audit.result }}" == "failure" ]] || [[ "${{ needs.secret-scanning.result }}" == "failure" ]]; then
            echo "::error::Security checks failed. Please review the audit results."
            exit 1
          fi
